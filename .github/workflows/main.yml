name: CICD
on:
  push:
    branches: [ main ]

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - run : ls -al
      
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: install jdk
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
          
      - name: chmod gradle
        run: chmod +x ./gradlew
      
      - name: build
        run: ./gradlew build --no-daemon
        
      - name: docker build
        run: |
          mv ./build/libs/*.war ./Dockerfile
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/rapa-cicdlab:v${{ env.RELEASE_VERSION }} ./Dockerfile
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/rapa-cicdlab:latest ./Dockerfile
          rm -Rf ./Dockerfile/*.war

      - name: docker images check
        run: docker images
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: docer push
      #   run: | 
      #     docker push ${{ secrets.DOCKERHUB_USERNAME }}/rapa-cicdlab:v${{ env.RELEASE_VERSION }}
      #     docker push ${{ secrets.DOCKERHUB_USERNAME }}/rapa-cicdlab:latest

     
      - name: Get EKS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 ##public 일때만!!
        
      # - name: Update kube config
      #   run: aws eks update-kubeconfig --name kkyungjin --region ap-northeast-2
    
      # - name: Update Deployment Image on EKS
      #   run: | 
      #     kubectl set image deploy mywas mywas=${{ secrets.DOCKERHUB_USERNAME }}/rapa-cicdlab:v${{ env.RELEASE_VERSION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: public.ecr.aws
          REGISTRY_ALIAS: o7v7w4z5
          REPOSITORY: was
          IMAGE_TAG: v${{ env.RELEASE_VERSION }}
        run: |
          docker image tag ${{ secrets.DOCKERHUB_USERNAME }}/rapa-cicdlab:v${{ env.RELEASE_VERSION }} $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG      

      - name: Update Kubernetes resources
        run: |
          cd yaml/was
          kustomize edit set image cicd-image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          cat kustomization.yaml
        env:
          REGISTRY: public.ecr.aws
          REGISTRY_ALIAS: o7v7w4z5
          REPOSITORY: was
          IMAGE_TAG: v${{ env.RELEASE_VERSION }}
              
      - name: Commit & Push Image 
        uses: actions-js/push@master
        with:
          message: '[was] Update Image :$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG'
          branch: main
          github_token: ${{ secrets.TOKEN }}
        env:
          REGISTRY: public.ecr.aws
          REGISTRY_ALIAS: o7v7w4z5
          REPOSITORY: was
          IMAGE_TAG: v${{ env.RELEASE_VERSION }}
   
      - name: Slack Notification
        on:
          pull_request:
          branches: [ "master", "develop" ]
 
          jobs:
            build:
              runs-on: ubuntu-latest
              steps:
              - name: action-slack
                uses: 8398a7/action-slack@v3
                with:
                  status: ${{ job.status }}
                  author_name: www-be
                  fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
                  if_mention: failure,cancelled
                env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
                if: always() # Pick up events even if the job fails or is canceled.
